# 电厂污染物排放预测系统 - 离线环境部署配置
# 适用于方天公司局域网内部署
name: pollution-prediction-system

services:
  # 主应用服务
  app:
    # 离线环境使用预构建镜像
    image: 294802186/pollution-prediction:v1.1
    # 开发环境可使用本地构建
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    container_name: pollution_prediction_app
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./templates:/app/templates
      - ./static:/app/static
    environment:
      - APP_ENV=production
      # 使用服务名而非硬编码IP
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/pollution_prediction
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_URL=http://prometheus:9090
      - USE_MOCK_TORCH=false
      - USE_MOCK_JINJA2=false
      - USE_MOCK_MODE=false
      - ENABLE_MOCK_TEMPLATES=false
      - SKIP_ML_MODELS=false
      # 设置应用内部监听地址和端口
      - API_HOST=0.0.0.0
      - API_PORT=8000
      # 时区设置
      - TZ=Asia/Shanghai
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 数据库服务
  db:
    image: postgres:14-alpine
    container_name: pollution_prediction_db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # 初始化脚本（可选）
      - ./init-scripts/db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=pollution_prediction
      - TZ=Asia/Shanghai
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis缓存服务
  redis:
    image: redis:6-alpine
    container_name: pollution_prediction_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: pollution_prediction_prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana监控界面服务
  grafana:
    image: grafana/grafana:latest
    container_name: pollution_prediction_grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      # 预配置的仪表盘（可选）
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      # 设置初始admin密码
      - GF_SECURITY_ADMIN_PASSWORD=admin
      # 允许匿名访问（可选，开发环境使用）
      - GF_AUTH_ANONYMOUS_ENABLED=true
      # 默认数据源
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      # 时区设置
      - TZ=Asia/Shanghai
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# 持久化卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络配置
networks:
  app_network:
    driver: bridge
    # 配置一个固定的子网，避免与公司内网冲突
    ipam:
      config:
        - subnet: 172.28.0.0/16 